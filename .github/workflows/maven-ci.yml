name: OTP CI Build

on:
  push:
  pull_request:
    branches:
      - ibi-dev
jobs:
  build:
    runs-on: ubuntu-latest

    env:
      MAVEN_OPTS: -Xmx2g
    steps:
      # Starting in v2.2 checkout action fetches all tags when fetch-depth=0, for auto-versioning.
      - uses: actions/checkout@v2.3.2
        with:
          fetch-depth: 0
      # Java setup step completes very fast, no need to run in a preconfigured docker container.
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      # Retain the local Maven repository to speed up builds.
      - name: Setup Maven Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.m2
          key: maven-local-repo
      # So that the branch name can be reference via $GITHUB_HEAD_REF_SLUG.
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      # Define AWS profile credentials for use by subsequent steps.
      - name: Add profile credentials to ~/.aws/credentials
        if: github.event_name == 'push'
          run: ./scripts/add-aws-credentials.sh
      # Build and test deployment.
      - name: Build and Test
        run: mvn clean verify --batch-mode --show-version --update-snapshots -Dgpg.skip
      # Only prepare deploy files on push events to avoid duplicate pushes to s3 when a commit is
      # pushed to a branch with an open pull request.
      - name: Prepare build files for deployment to s3
        if: github.event_name == 'push'
        run: ./scripts/prep-build-for-deploy-from-github-actions.sh
      # Copy build files to AWS.
      - name: Copy build files to the otp-repo bucket
        if: github.event_name == 'push'
        run: |
          aws s3 cp --acl public-read "deploy" "otp-repo"
#        uses: jakejarvis/s3-sync-action@master
#        with:
#          args: --acl public-read
#        env:
#          AWS_S3_BUCKET: otp-repo
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          SOURCE_DIR: 'deploy'
      # Install mkdocs using pip for use by subsequent steps.
      - name: Install mkdocs
        if: github.event_name == 'push'
#        if: github.event_name == 'push' && env.GITHUB_HEAD_REF_SLUG == 'ibi-dev'
        run: |
           pip install mkdocs
      # Using mkdocs produce docs for deployment.
      - name: Prepare doc files for deployment to s3
        if: github.event_name == 'push'
#        if: github.event_name == 'push' && env.GITHUB_HEAD_REF_SLUG == 'ibi-dev'
        run: ./scripts/prep-docs-for-deploy-from-github-actions.sh
      # If on ibi-dev branch, then upload docs to IBI s3 buckets & cloudfront
      - name: Upload docs to IBI s3 buckets & cloudfront
        if: github.event_name == 'push'
#        if: github.event_name == 'push' && env.GITHUB_HEAD_REF_SLUG == 'ibi-dev'
        run: |
          aws s3 cp --acl public-read "target/mkdocs" "otp-docs.ibi-transit.com"
#        uses: jakejarvis/s3-sync-action@master
#        with:
#          args: --acl public-read
#        env:
#          AWS_S3_BUCKET: otp-docs.ibi-transit.com
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          SOURCE_DIR: 'target/mkdocs'
      # Push notification to Teams.
#      - name: Notify us of the build status on MS Teams
#        uses: toko-bifrost/ms-teams-deploy-card@master #  or "./" if in a local set-up
#        if: always()
#        with:
#          github-token: ${{ github.token }}
#          # TODO Add webhook to GitHub secrets
#          # webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
#          webhook_url: https://outlook.office.com/webhook/03fa4a79-572f-4c68-b756-e4e851d0215a@9093f1a3-8771-4fb7-8596-d51eeef18cda/TravisCI/0aec73ecb8eb4ad696ea
