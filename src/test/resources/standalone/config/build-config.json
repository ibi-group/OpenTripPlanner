{
  // Routing defaults are any public field or setter in the Java class
  // org.opentripplanner.routing.api.request.RouteRequest
  "routingDefaults": {
    "numItineraries": 6,
    "walkSpeed": 2.0,
    "stairsReluctance": 4.0,
    "carDropoffTime": 240
  },

  "updaters": [
    // GTFS-RT service alerts (frequent polling)
    {
      "type": "real-time-alerts",
      "frequencySec": 30,
      "url": "http://developer.trimet.org/ws/V1/FeedSpecAlerts/appID/0123456789ABCDEF",
      "feedId": "TriMet"
    },

    //<!--- Tampa Area GBFS bike share -->
    {
      "type": "vehicle-rental",
      "frequencySec": 300,
      "sourceType": "gbfs",
      "url": "http://coast.socialbicycles.com/opendata/gbfs.json"
    },

    // Vehicle parking availability
    //{
    //  "type": "vehicle-parking"
    //},

    // Polling for GTFS-RT TripUpdates)
    {
      "type": "stop-time-updater",
      "frequencySec": 60,
      // this is either http or file... shouldn't it default to http or guess from the presence of a URL?
      "sourceType": "gtfs-rt-http",
      // Optional parameter for defining behaviour for propagating delays to previous stops.
      // Default value is "REQUIRED_NO_DATA" which only propagates delays backwards when it is required
      // to ensure that the times are increasing and it sets the NO_DATA flag on the stops so these
      // automatically updated times are not exposed through APIs and the stops at the beginning
      // that have not received any updates, will not be shown as realtime updated.
      // Other options are "REQUIRED" (same as default, but NO_DATA flag is not set) and
      // "ALWAYS" (propagates delays backwards on stops with no estimates
      // regardless if it's required or not, and NO_DATA flag is not set).
      "backwardsDelayPropagationType": "REQUIRED_NO_DATA",
      "url": "http://developer.trimet.org/ws/V1/TripUpdate/appID/0123456789ABCDEF",
      "feedId": "TriMet"
    },

    // Polling for GTFS-RT Vehicle Positions - output can be fetched via trip pattern GraphQL APIss
    {
      "type": "vehicle-positions",
      "sourceType": "gtfs-rt-http",
      "url": "https://s3.amazonaws.com/kcm-alerts-realtime-prod/vehiclepositions.pb",
      "feedId": "1",
      "frequencySec": 60
    },

    // Streaming differential GTFS-RT TripUpdates over websockets
    {
      "type": "websocket-gtfs-rt-updater"
    },

    // SIRI SX updater for Azure Service Bus
    {
      "type": "siri-azure-sx-updater",
      "topic": "some_topic",
      "servicebus-url": "service_bus_url",
      "feedId": "feed_id",
      // Set custom hour for when operating day date breaks
      // In this case 04:00 every night,s
      // so that 2022-04-21 03:00 will still be operating day date 2022-04-20
      "customMidnight":  4,
      // This is used to fetch old messages from http endpoint on startup
      "history": {
        "url": "endpoint_url",
        // Previous operating day date
        "fromDateTime": "-P1D",
        // Next operating day date
        "toDateTime": "P1D",
        // timeout in miliseconds
        "timeout": 300000
      }
    },

    // SIRI ET updater for Azure Service Bus
    // Configs are the same as in SX updater
    {
      "type": "siri-azure-sx-updater",
      "topic": "some_topic",
      "servicebus-url": "service_bus_url",
      "feedId": "feed_id",
      "customMidnight":  4,
      "history": {
        "url": "endpoint_url",
        // Current operating day date
        "fromDateTime": "-P0D",
        "timeout": 300000
      }
    }
  ]
}
